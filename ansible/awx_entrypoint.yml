---
- name: avail devnet
  hosts: localhost
  become: true
  collections:
    - amazon.aws
  tasks:
    - name: setup virtualenv and system dependencies
      shell:
        cmd: |
          unset PYTHONPATH
          yum install curl gcc jq python3-devel python-boto3 python-devel python-virtualenv yum-utils -y
          curl -sSfo op.zip \
            https://cache.agilebits.com/dist/1P/op2/pkg/v2.0.0/op_linux_amd64_v2.0.0.zip \
            && unzip -od /usr/local/bin/ op.zip \
            && rm op.zip
          mkdir -p /opt/my-envs && chmod 0755 /opt/my-envs
          python3 -m venv /opt/my-envs/{{ CUSTOM_VENV }}
          source /opt/my-envs/{{ CUSTOM_VENV }}/bin/activate
          pip install --upgrade pip
          pip install boto3 botocore psutil ansible
          deactivate

    - name: setup terraform and aws session manager
      args:
        warn: false
      shell:
        cmd: |
          mkdir -p /opt/avail_repo && mkdir -p /opt/avail_binary && mkdir -p $HOME/.terraform.d
          yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
          curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/linux_64bit/session-manager-plugin.rpm" -o "session-manager-plugin.rpm"
          yum install terraform session-manager-plugin.rpm -y

    - name: clone repo branch
      ansible.builtin.git:
        repo: https://{{ lookup("env", "PAT_TOKEN") }}@github.com/maticnetwork/avail-deployment.git
        dest: /opt/avail_repo
        clone: true
        accept_hostkey: true
        version: '{{ GIT_BRANCH_NAME }}'
        force: true
        update: true
      ignore_errors: false
      no_log: false

    - name: set vars for reference across tasks
      shell:
        cmd: |
          CLEAN_GIT_BRANCH=$(sed -E 's/[^[:alnum:][:space:]]+/-/g' <<<{{ GIT_BRANCH_NAME }})
          echo "$CLEAN_GIT_BRANCH"
      register: branch_output

    - set_fact:
        clean_branch_name: '{{ branch_output.stdout_lines[-1] }}'

    - name: create terraform cloud auth config
      copy:
        dest: /var/lib/awx/.terraform.d/credentials.tfrc.json
        content: |
          credentials "app.terraform.io" {
            token = "{{ lookup("env", "TF_TOKEN") }}"
          }

# - name: delete any orphan terraform devnet resources
#   shell:
#     cmd: |
#       cd /opt/avail_repo/tf/nets/devnet01
#       terraform init
#       terraform destroy -no-color -var 'deploy_name={{ clean_branch_name }}' -var 'owner={{ awx_user_name }}' -var 'full_node_count={{ FULL_NODE_COUNT }}' -var 'validator_count={{ VALIDATOR_COUNT }}' -auto-approve
#
    - name: init terraform and apply avail resources
      shell:
        cmd: |
          cd /opt/avail_repo/tf/nets/devnet01
          terraform init
          echo $(terraform output -json pk_ansible)
      register: nodes

    - name: get binary release metadata
      uri:
        url: https://api.github.com/repos/maticnetwork/avail/releases/latest
        return_content: true
        headers:
          Authorization: 'token {{ lookup("env", "PAT_TOKEN") }}'
      register: github_response

    - set_fact:
        binary_asset_url: '{{  github_response.json.assets|json_query(query) }}'
      vars:
        query: "[?name=='{{ GITHUB_BINARY_FILENAME }}'].url | [0]"

    - name: get binary asset location
      uri:
        url: '{{ binary_asset_url }}'
        return_content: false
        follow_redirects: none
        status_code: 302
        headers:
          Authorization: 'token {{ lookup("env", "PAT_TOKEN") }}'
          Accept: application/octet-stream
      register: assets

    - name: download binary
      get_url:
        url: '{{ assets.location }}'
        dest: /opt/avail_binary/data-avail-amd64
        mode: 0755

    - name: wallet, node key, and chainspec generation
      shell:
        cmd: |
          unset PYTHONPATH
          cd /opt/avail_repo/ansible-v2/scripts
          rm -r -f build/{{ clean_branch_name }}
          source /opt/my-envs/{{ CUSTOM_VENV }}/bin/activate
          export OP_DEVICE={{ OP_DEVICE_ID }}
          eval $(echo '{{ lookup("env", "OP_PASS") }}' | op account add --address {{ OP_ADDRESS }} --email {{ OP_EMAIL }}  --secret-key {{ lookup("env", "OP_SECRET") }}  --shorthand awx --signin)
          bash prep.sh -d {{ clean_branch_name }}
          deactivate

    - name: prep ssh key for remote node connections
      shell:
        cmd: |
          echo {{ nodes.stdout_lines[-1] }} > /tmp/awxSshKey.pem
          echo -e "$(</tmp/awxSshKey.pem )" > ~/.ssh/awxSshKey.pem
          chmod 400 ~/.ssh/awxSshKey.pem

    - name: configure avail devnet nodes
      shell:
        cmd: |
          unset PYTHONPATH
          source /opt/my-envs/{{ CUSTOM_VENV }}/bin/activate
          export OP_DEVICE={{ OP_DEVICE_ID }}
          eval $(echo '{{ lookup("env", "OP_PASS") }}' | op account add --address {{ OP_ADDRESS }} --email {{ OP_EMAIL }}  --secret-key {{ lookup("env", "OP_SECRET") }}  --shorthand awx --signin)
          ansible-playbook /opt/avail_repo/ansible-v2/site.yml -i /opt/avail_repo/ansible-v2/inventory/aws_ec2.yaml --extra-vars="clean_deploy_name={{ clean_branch_name }} avail_scripts_dir=/opt/avail_repo/ansible-v2/scripts"
          deactivate
