---
- name: provision avail resources and configure nodes with ansible
  hosts: localhost
  roles:
     - role: staticdev.pyenv
       pyenv_path: "/tmp/pyenv"
       pyenv_owner: "root"
       pyenv_global:
         - 3.6.4
       pyenv_enable_autocompletion: false
       pyenv_python_versions:
         - 3.6.4
  collections:
  - amazon.aws
  - community.docker
  tasks:
  - name: setup virtualenv
    shell:
      cmd: |
        export PATH="/tmp/pyenv/shims:$PATH"
        eval "$(. /tmp/pyenv/.pyenvrc && pyenv init --path)"
        . /tmp/pyenv/.pyenvrc && pyenv versions
        . /tmp/pyenv/.pyenvrc && pyenv global 3.6.4
        unset PYTHONPATH
        sudo yum install python-virtualenv -y
        sudo mkdir -p /opt/my-envs
        sudo chmod 0755 /opt/my-envs
        sudo python3 -m venv /opt/my-envs/custom-venv-2
        sudo yum install gcc -y
        sudo yum install python-devel -y
        sudo yum install python3-devel -y
        source /opt/my-envs/custom-venv-2/bin/activate
        pip install --upgrade pip
        pip install boto3 botocore
        sudo /opt/my-envs/custom-venv-2/bin/pip install psutil
        sudo /opt/my-envs/custom-venv-2/bin/pip install -U ansible
        python -V
        sudo /opt/my-envs/custom-venv-2/bin/pip list
        deactivate

  - name: setup controller machine dependencies
    shell:
      cmd: |
        export PATH="/tmp/pyenv/shims:$PATH"
        eval "$(. /tmp/pyenv/.pyenvrc && pyenv init --path)"
        . /tmp/pyenv/.pyenvrc && pyenv versions
        . /tmp/pyenv/.pyenvrc && pyenv global 3.6.4
        unset PYTHONPATH
        pip install --user boto3 botocore
        sudo pip3 install awscli --force-reinstall --upgrade
        mkdir -p /opt/avail_repo
        mkdir -p /opt/avail_source
        mkdir -p /opt/avail_binary
        cp /opt/avail_source/target/release/data-avail /opt/avail_binary
        cd /opt/avail_binary
        ./data-avail key generate --output-type json --scheme Sr25519 -w 21
        sudo yum install -y yum-utils
        sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
        sudo yum -y install terraform
        sudo yum -y install curl
        curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/linux_64bit/session-manager-plugin.rpm" -o "session-manager-plugin.rpm"
        sudo yum install -y session-manager-plugin.rpm
        session-manager-plugin

        sudo yum install centos-release-scl -y
        sudo yum install llvm-toolset-7 -y
        scl enable llvm-toolset-7 bash
        export PATH="/opt/rh/llvm-toolset-7/root/usr/bin:$PATH"
        clang --version

        mkdir -p $HOME/.terraform.d

  - name: create terraform cloud auth config
    copy:
      dest: "/var/lib/awx/.terraform.d/credentials.tfrc.json"
      content: |
        credentials "app.terraform.io" {
          token = "{{ lookup("env", "TF_TOKEN") }}"
        }

  - name: add safe directory for avail repo
    command: git config --global --add safe.directory /opt/avail_repo
    check_mode: no

  - name: clone avail-deployment repo branch
    ansible.builtin.git:
      repo: 'https://{{ lookup("env", "PAT_TOKEN") }}@github.com/maticnetwork/avail-deployment.git'
      dest: /opt/avail_repo
      clone: yes
      accept_hostkey: true
      version: "{{ GIT_BRANCH_NAME }}"
      force: yes
      update: yes
    ignore_errors: false
    no_log: false
    register: git_clone

  - name: clone avail source
    ansible.builtin.git:
      repo: 'https://{{ lookup("env", "PAT_TOKEN") }}@github.com/maticnetwork/avail.git'
      dest: /opt/avail_source
      clone: yes
      accept_hostkey: true
      force: yes
      update: yes
    ignore_errors: false
    no_log: false
    register: git_clone

  - name: set vars for reference across tasks
    shell:
      cmd: |
        cd /opt/avail_repo/tf/nets/devnet01
        CLEAN_GIT_BRANCH=$(sed -E 's/[^[:alnum:][:space:]]+/-/g' <<<{{ GIT_BRANCH_NAME }})
        echo "$CLEAN_GIT_BRANCH"
    register: branch_output

  - set_fact:
      clean_branch_name: "{{ branch_output.stdout_lines[-1] }}"

  - name: delete any orphan terraform devnet resources
    shell:
      cmd: |
        cd /opt/avail_repo/tf/nets/devnet01
        terraform init
        terraform destroy -no-color -var 'deploy_name={{ clean_branch_name }}' -var 'owner={{ awx_user_name }}' -auto-approve

  - name: init terraform and apply avail resources
    shell:
      cmd: |
        cd /opt/avail_repo/tf/nets/devnet01
        terraform init
        terraform apply -no-color -var 'deploy_name={{ clean_branch_name }}' -var 'owner={{ awx_user_name }}' -auto-approve
        echo $(terraform output -json pk_ansible)
    register: nodes

  - name: wallet, node key, and chainspec generation
    shell:
      cmd: |
        eval "$(. /tmp/pyenv/.pyenvrc && pyenv init --path)"
        . /tmp/pyenv/.pyenvrc && pyenv versions
        . /tmp/pyenv/.pyenvrc && pyenv global 3.6.4
        unset PYTHONPATH
        yum install jq -y
        jq -Version
        curl -sSfo op.zip \
          https://cache.agilebits.com/dist/1P/op2/pkg/v2.0.0/op_linux_amd64_v2.0.0.zip \
          && unzip -od /usr/local/bin/ op.zip \
          && rm op.zip
        op --version
        curl https://sh.rustup.rs -sSf | sh -s -- -y
        source "$HOME/.cargo/env"
        cd /opt/avail_source
        sudo yum install centos-release-scl -y
        sudo yum install llvm-toolset-7 -y
        sudo yum install gcc-c++ -y
        scl enable llvm-toolset-7 bash
        export PATH="/opt/rh/llvm-toolset-7/root/usr/bin:$PATH"
        clang --version
        export LIBCLANG_PATH="/opt/rh/llvm-toolset-7/root/usr/lib64/"
        yum whatprovides *libclang.so
        cd /opt/avail_binary
        aws s3 cp s3://avail-binaries/data-avail-amd64 .
        sudo chmod +x data-avail-amd64
        ./data-avail-amd64 key generate --output-type json --scheme Sr25519 -w 21

        export OP_DEVICE={{ OP_DEVICE_ID }}
        eval $(echo '{{ lookup("env", "OP_PASS") }}' | op account add --address {{ OP_ADDRESS }} --email {{ OP_EMAIL }}  --secret-key {{ lookup("env", "OP_SECRET") }}  --shorthand awx --signin)

        sudo yum -y install python-boto3
        cd /opt/avail_repo/ansible-v2/scripts
        ansible-inventory --graph -i /opt/avail_repo/ansible-v2/inventory/aws_ec2.yaml
        rm -r -f build/{{ clean_branch_name }}
        bash key-prep-awx.sh -d {{ clean_branch_name }}

  - name: configure all nodes
    shell:
      cmd: |
        sleep 10m
        eval "$(. /tmp/pyenv/.pyenvrc && pyenv init --path)"
        . /tmp/pyenv/.pyenvrc && pyenv versions
        . /tmp/pyenv/.pyenvrc && pyenv global 3.6.4
        unset PYTHONPATH
        echo {{ nodes.stdout_lines[-1] }} > /tmp/awxSshKey.pem
        echo -e "$(</tmp/awxSshKey.pem )" > ~/.ssh/awxSshKey.pem
        chmod 400 ~/.ssh/awxSshKey.pem
        cd /opt/avail_repo/ansible-v2
        source /opt/my-envs/custom-venv-2/bin/activate
        export OP_DEVICE={{ OP_DEVICE_ID }}
        eval $(echo '{{ lookup("env", "OP_PASS") }}' | op account add --address {{ OP_ADDRESS }} --email {{ OP_EMAIL }}  --secret-key {{ lookup("env", "OP_SECRET") }}  --shorthand awx --signin)
        ansible-playbook site.yml -i /opt/avail_repo/ansible-v2/inventory/aws_ec2.yaml --extra-vars="clean_deploy_name={{ clean_branch_name }}"
        deactivate
