---
- name: provision avail resources and configure nodes with ansible
  hosts: localhost
  roles:
     - role: staticdev.pyenv
       pyenv_path: "/tmp/pyenv"
       pyenv_owner: "root"
       pyenv_global:
         - 3.6.4
       pyenv_enable_autocompletion: false
       pyenv_python_versions:
         - 3.6.4
  tasks:
  - name: setup python3 and terraform on controller machine
    shell:
      cmd: |
        export PATH="/tmp/pyenv/shims:$PATH"
        eval "$(. /tmp/pyenv/.pyenvrc && pyenv init --path)"
        . /tmp/pyenv/.pyenvrc && pyenv versions
        . /tmp/pyenv/.pyenvrc && pyenv global 3.6.4
        unset PYTHONPATH
        pip install --user boto3 botocore
        mkdir -p /opt/avail_repo
        sudo yum install -y yum-utils
        sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
        sudo yum -y install terraform

  - name: create tf cloud authentication config
    copy:
      dest: "/var/lib/awx/.terraform.d/credentials.tfrc.json"
      content: |
        credentials "app.terraform.io" {
          token = "{{ lookup("env", "TF_TOKEN") }}"
        }

  - name: update safe directory for avail repo
    command: git config --global --add safe.directory /opt/avail_repo
    check_mode: no

  - name: clone specific avail repo branch to localhost
    ansible.builtin.git:
      repo: 'https://{{ lookup("env", "PAT_TOKEN") }}@github.com/maticnetwork/avail-deployment.git'
      dest: /opt/avail_repo
      clone: yes
      accept_hostkey: true
      version: {{ GIT_BRANCH_NAME }}
      force: yes
      update: yes
    ignore_errors: false
    no_log: false
    register: git_clone

  - name: init terraform and apply to provision resources
    shell:
      cmd: |
        cd /opt/avail_repo/tf/nets/devnet01
        COMMIT_SHA="$(git rev-parse --short HEAD)"
        CLEAN_GIT_BRANCH=$(tr '/' '_' <<<{{ GIT_BRANCH_NAME }})
        terraform init
        terraform apply -no-color -var 'deploy_name=devnet_'"$CLEAN_GIT_BRANCH"'' -var 'owner={{ awx_user_id }}'
    register: new_nodes

#
#   - name: Add new instance to host group
#     add_host:
#       hostname: "{{ item }}"
#       groupname: launched
#     loop: "{{ new_nodes.stdout_lines[-1] }}"
#
# - name: Configure instance(s)
#   hosts: launched
#   become: yes
#   gather_facts: True
#   vars:
#     create_containers: 1
#     default_container_name: bor
#     default_container_image: 0xpolygon/bor:0.3.0-beta3
#   tasks:
#     - name: Wait for sudo
#       become: yes
#       shell:  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done;
#     - name: Install aptitude
#       apt:
#         name: aptitude
#         state: latest
#         update_cache: true
#     - name: Install required system packages
#       apt:
#         pkg:
#           - apt-transport-https
#           - ca-certificates
#           - curl
#           - software-properties-common
#           - python3-pip
#           - virtualenv
#           - python3-setuptools
#           - awscli
#         state: latest
#         update_cache: true
#     - name: Add Docker GPG apt Key
#       apt_key:
#         url: https://download.docker.com/linux/ubuntu/gpg
#         state: present
#     - name: Add Docker Repository
#       apt_repository:
#         repo: deb https://download.docker.com/linux/ubuntu focal stable
#         state: present
#     - name: Update apt and install docker-ce
#       apt:
#         name: docker-ce
#         state: latest
#         update_cache: true
#     - name: Install Docker Module for Python
#       pip:
#         name: docker
#     - name: Login ECR
#       shell: "{{ item }}"
#       environment:
#         AWS_ACCESS_KEY_ID: "{{ lookup('env','AWS_ACCESS_KEY_ID') }}"
#         AWS_SECRET_ACCESS_KEY: "{{ lookup('env','AWS_SECRET_ACCESS_KEY') }}"
#         AWS_REGION: us-east-2
#       with_items:
#        - $(aws ecr get-login -a-no-include-email --region us-east-2)
#     - name: Pull default docker image
#       docker_image:
#         name: "{{ default_container_image }}"
#         source: pull
#     - name: Create and run container
#       docker_container:
#         name: "{{ default_container_name }}{{ item }}"
#         image: "{{ default_container_image }}"
#         state: started
#         ports: "8080:80"
#         detach: yes
#         command: server
#       with_sequence: count={{ create_containers }}
#
# - name: teardown instances
#   hosts: localhost
#   tasks:
#     - name: teardown resources once done with testing
#       shell:
#         cmd: |
#           sleep 2m
#           cd /opt/tf_repo/aws/test-applications/us-east-2/ci_deployment_cluster
#           terraform init
#           terraform destroy -var 'instance_count={{ instance_count }}' -auto-approve
