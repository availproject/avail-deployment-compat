---
- name: provision avail resources and configure nodes with ansible
  hosts: localhost
  roles:
     - role: staticdev.pyenv
       pyenv_path: "/tmp/pyenv"
       pyenv_owner: "root"
       pyenv_global:
         - 3.6.4
       pyenv_enable_autocompletion: false
       pyenv_python_versions:
         - 3.6.4
  tasks:
  - name: setup python3 and terraform on controller machine
    shell:
      cmd: |
        export PATH="/tmp/pyenv/shims:$PATH"
        eval "$(. /tmp/pyenv/.pyenvrc && pyenv init --path)"
        . /tmp/pyenv/.pyenvrc && pyenv versions
        . /tmp/pyenv/.pyenvrc && pyenv global 3.6.4
        unset PYTHONPATH
        pip install --user boto3 botocore
        mkdir -p /opt/avail_repo
        sudo yum install -y yum-utils
        sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
        sudo yum -y install terraform

  - name: create tf cloud authentication config
    copy:
      dest: "/var/lib/awx/.terraform.d/credentials.tfrc.json"
      content: |
        credentials "app.terraform.io" {
          token = "{{ lookup("env", "TF_TOKEN") }}"
        }

  - name: update safe directory for avail repo
    command: git config --global --add safe.directory /opt/avail_repo
    check_mode: no

  - name: clone specific avail repo branch to localhost
    ansible.builtin.git:
      repo: 'https://{{ lookup("env", "PAT_TOKEN") }}@github.com/maticnetwork/avail-deployment.git'
      dest: /opt/avail_repo
      clone: yes
      accept_hostkey: true
      version: "{{ GIT_BRANCH_NAME }}"
      force: yes
      update: yes
    ignore_errors: false
    no_log: false
    register: git_clone

  - name: set reused vars for reference across tasks
    shell:
      cmd: |
        cd /opt/avail_repo/tf/nets/devnet01
        CLEAN_GIT_BRANCH=$(sed -E 's/[^[:alnum:][:space:]]+/-/g' <<<{{ GIT_BRANCH_NAME }})
        echo "$CLEAN_GIT_BRANCH"
      register: branch_output

  - set_fact:
      clean_branch_name: "{{ branch_output.stdout_lines[-1] }}"

  - name: test global var
    shell:
      cmd: |
        echo "{{ clean_branch_name }}"
#
#   - name: delete any orphan terraform devnet resources
#     shell:
#       cmd: |
#         cd /opt/avail_repo/tf/nets/devnet01
#         terraform init
#         terraform destroy -no-color -var 'deploy_name=devnet_'"$CLEAN_GIT_BRANCH"'' -var 'owner={{ awx_user_name }}' -var 'subdomain='"$SUBDOMAIN_FORMATTED"'' -auto-approve
#
#   - name: init terraform and apply to provision avail resources
#     shell:
#       cmd: |
#         cd /opt/avail_repo/tf/nets/devnet01
#         COMMIT_SHA="$(git rev-parse --short HEAD)"
#         CLEAN_GIT_BRANCH=$(tr '/' '_' <<<{{ GIT_BRANCH_NAME }})
#         terraform init
#         terraform apply -no-color -var 'deploy_name=devnet_'"$CLEAN_GIT_BRANCH"'' -var 'owner={{ awx_user_name }}' -auto-approve
#         echo $(terraform output full_node_ips)
#         echo $(terraform output validator_ips)
#         echo $(terraform output explorer_ips)
#         echo $(terraform output light_client_ips)
#     register: nodes
#
#   - name: register full node host group
#     add_host:
#       hostname: "{{ item }}"
#       groupname: full_nodes
#     loop: "{{ nodes.stdout_lines[-4] }}"
#
#   - name: register validators host group
#     add_host:
#       hostname: "{{ item }}"
#       groupname: validators
#     loop: "{{ nodes.stdout_lines[-3] }}"
#
#   - name: register explorers host group
#     add_host:
#       hostname: "{{ item }}"
#       groupname: explorers
#     loop: "{{ nodes.stdout_lines[-2] }}"
#
#   - name: register light clients host group
#     add_host:
#       hostname: "{{ item }}"
#       groupname: light_clients
#     loop: "{{ nodes.stdout_lines[-1] }}"
#
# # TODO: key generation phase, can we combine with provisioning step?
# # TODO: configure all nodes via ansible and start containers
#
#   - name: teardown all terraform resources once done
#     shell:
#       cmd: |
#         sleep 3m
#         cd /opt/avail_repo/tf/nets/devnet01
#         terraform init
#         terraform destroy -no-color -var 'deploy_name=devnet_'"$CLEAN_GIT_BRANCH"'' -var 'owner={{ awx_user_name }}' -auto-approve
