---
- name: provision avail resources and configure nodes with ansible
  hosts: localhost
  roles:
     - role: staticdev.pyenv
       pyenv_path: "/tmp/pyenv"
       pyenv_owner: "root"
       pyenv_global:
         - 3.6.4
       pyenv_enable_autocompletion: false
       pyenv_python_versions:
         - 3.6.4
  # vars:
  #   ansible_python_interpreter: /usr/bin/python3.6
  tasks:
  - name: install terraform and ssm agent on controller machine
    shell:
      cmd: |
        export PATH="/tmp/pyenv/shims:$PATH"
        eval "$(. /tmp/pyenv/.pyenvrc && pyenv init --path)"
        . /tmp/pyenv/.pyenvrc && pyenv versions
        . /tmp/pyenv/.pyenvrc && pyenv global 3.6.4
        unset PYTHONPATH
        pip install --user boto3 botocore
        sudo pip3 install awscli --force-reinstall --upgrade
        echo $SHELL
        echo $PATH
        aws --version
        mkdir -p /opt/avail_repo
        cat /etc/os-release
        sudo yum install -y yum-utils
        sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
        sudo yum -y install terraform
        sudo yum -y install curl
        curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/linux_64bit/session-manager-plugin.rpm" -o "session-manager-plugin.rpm"
        sudo yum install -y session-manager-plugin.rpm
        session-manager-plugin

  - name: create tf cloud authentication config
    copy:
      dest: "/var/lib/awx/.terraform.d/credentials.tfrc.json"
      content: |
        credentials "app.terraform.io" {
          token = "{{ lookup("env", "TF_TOKEN") }}"
        }

  - name: update safe directory for avail repo
    command: git config --global --add safe.directory /opt/avail_repo
    check_mode: no

  - name: clone specific avail repo branch to localhost
    ansible.builtin.git:
      repo: 'https://{{ lookup("env", "PAT_TOKEN") }}@github.com/maticnetwork/avail-deployment.git'
      dest: /opt/avail_repo
      clone: yes
      accept_hostkey: true
      version: "{{ GIT_BRANCH_NAME }}"
      force: yes
      update: yes
    ignore_errors: false
    no_log: false
    register: git_clone

  - name: set reused vars for reference across tasks
    shell:
      cmd: |
        cd /opt/avail_repo/tf/nets/devnet01
        CLEAN_GIT_BRANCH=$(sed -E 's/[^[:alnum:][:space:]]+/-/g' <<<{{ GIT_BRANCH_NAME }})
        echo "$CLEAN_GIT_BRANCH"
    register: branch_output

  - set_fact:
      clean_branch_name: "{{ branch_output.stdout_lines[-1] }}"

  # - name: delete any orphan terraform devnet resources
  #   shell:
  #     cmd: |
  #       cd /opt/avail_repo/tf/nets/devnet01
  #       terraform init
  #       terraform destroy -no-color -var 'deploy_name={{ clean_branch_name }}' -var 'owner={{ awx_user_name }}' -auto-approve

  - name: init terraform and apply to provision avail resources
    shell:
      cmd: |
        cd /opt/avail_repo/tf/nets/devnet01
        terraform init
        terraform apply -no-color -var 'deploy_name={{ clean_branch_name }}' -var 'owner={{ awx_user_name }}' -auto-approve
        echo $(terraform output -json pk_ansible) > /tmp/ansiblePair.pem
        echo $(terraform output full_node_ips)
        echo $(terraform output validator_ips)
        echo $(terraform output explorer_ips)
        echo $(terraform output light_client_ips)
    register: nodes

  - name: confirm pem key formatted appropriately
    shell:
      cmd: |
        cat /tmp/ansiblePair.pem

  - name: register full node host group
    add_host:
      hostname: "{{ item }}"
      groupname: full_nodes
    loop: "{{ nodes.stdout_lines[-4] }}"

  - name: register validators host group
    add_host:
      hostname: "{{ item }}"
      groupname: validators
    loop: "{{ nodes.stdout_lines[-3] }}"

  - name: register explorers host group
    add_host:
      hostname: "{{ item }}"
      groupname: explorers
    loop: "{{ nodes.stdout_lines[-2] }}"

  - name: register light clients host group
    add_host:
      hostname: "{{ item }}"
      groupname: light_clients
    loop: "{{ nodes.stdout_lines[-1] }}"

  - name: test ssm
    shell:
      cmd: |
        unset PYTHONPATH
        aws ssm start-session --target i-071dfa3c428b9c381 --document-name AWS-StartSSHSession --parameters 'portNumber=22' --region us-west-2

- name: Configure instance(s)
  hosts: full_nodes
  become: yes
  gather_facts: True
  vars:
    - ansible_ssh_common_args: -o StrictHostKeyChecking=no -o ProxyCommand="sh -c \"aws ssm start-session --target %h --document-name AWS-StartSSHSession --region us-west-2 --parameters 'portNumber=%p'\""
    - ansible_user: ubuntu
    - ansible_become: true
    - ansible_ssh_private_key_file: '/tmp/ansiblePair.pem'
  tasks:
    - name: Wait for sudo
      become: yes
      shell:  while sudo fuser /var/lib/dpkg/lock >/dev/null 2>&1; do sleep 5; done;

# TODO: key generation phase, can we combine with provisioning step?
# TODO: configure all nodes via ansible and start containers
  #
  # - name: teardown all terraform resources once done
  #   shell:
  #     cmd: |
  #       sleep 3m
  #       cd /opt/avail_repo/tf/nets/devnet01
  #       terraform init
  #       terraform destroy -no-color -var 'deploy_name={{ clean_branch_name }}' -var 'owner={{ awx_user_name }}' -auto-approve
