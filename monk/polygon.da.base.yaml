namespace: /polygon

#  Secure Vault 
#  ===============================

da-vault:
  defines: runnable
  inherits: vault/latest
  affinity:
    defines: affinity
    tag: service
  volumes:
    defines: volumes
    vault-data:
      size: 4
      kind: SSD
      path: <- $volume-data
  containers:
    defines: containers
    vault:
      image-tag: 1.9.4
      # entrypoint: "docker-entrypoint.sh server"
      paths: 
        - <-`${volume-data}:/vault/file`
      #ports:
      #  - 0.0.0.0:8200:8200
      environment:
        - VAULT_CLI_NO_COLOR=1
        - SKIP_SETCAP=1
        - <- `VAULT_DEV_ROOT_TOKEN_ID=${root-token}`
        - <- `VAULT_TOKEN=${root-token}`
  variables:
    root-token: "da-root-test"
    volume-data: /mnt/vault-data
  actions:
    defines: actions
    get_as_json:
      description: Get value as Json
      arguments:
        path:
          type: string
          description: Value path
      code: exec("vault", "/bin/sh", "-c", `VAULT_TOKEN=${root-token} VAULT_CLI_NO_COLOR=true vault kv get -address=http://127.0.0.1:8200 -format=json ${args["path"]}`) trim parse-json get-member("data") get-member("data") to-json
  files:
    defines: files
    da-val-def:
      container: vault 
     # path: /vault/config/local.json
      path: /local.json
      mode: 644
      contents: |
        {
          "backend": {
            "file": {
              "path": "/vault/file"
            }
          },
          "listener": {
            "tcp":{
              "address": "0.0.0.0:8200",
              "tls_disable": 1
            }
          },
          "ui": true,
          "disable_mlock": true,
          "default_lease_ttl": "168h", 
          "max_lease_ttl": "720h"
        }

# Data-Avail Common Node
# ================================

da-common-node:
  metadata:
    defines: metadata
    name: Data-Avail Testnet
    description: Data-Avail Testnet Common Node
    email: miguel@polygon.technology
  containers:
    defines: containers
    da-node: 
      image: 0xpolygon/avail:ava-122
      user: root
      entrypoint: /da/bin/da.sh
      paths:
        - <- `${volume-data}/state:/da/state`
        - <- `${volume-data}/keystore:/da/keystore`
      labels:
        - com.datadoghq.ad.check_names=["openmetrics"]
        - com.datadoghq.ad.init_configs=[{}]
        - <- "com.datadoghq.ad.instances=" act(`polygon/${self_id}/openmetrics-instances`) concat
  actions:
    defines: actions
    openmetrics-endpoint:
      description: Generates OpenMetris endpoint
      code: |
        "http://" get-hostname(`polygon/${self_id}`, "da-node") 
        ":" $prometheus_port "/metrics" 
        concat-all
    openmetrics-instances:
      description: Generates the OpenMetris instances
      code: |
        []
        {
          namespace: "avail",
          metrics: ["substrate*"] 
        }
        "openmetrics_endpoint" act(`polygon/${self_id}/openmetrics-endpoint`) assoc
        append
        to-json

  variables:
    defines: variables
    self_id:
      type: string
      value: "" 
    chain_spec:
      type: string
      value: '/da/genesis/testnet.chain.spec.raw.json'
    name:
      type: string
      value: DA_VALIDATOR
    node_key:
      type: string
      value: ""
    in_peers:
      type: int
      value: 10
    out_peers:
      type: int
      value: 10
    p2p_port:
      type: int
      value: 30333
    ws_port:
      type: int
      value: 9944
    rpc_port:
      type: int
      value: 9933
    prometheus_port:
      type: int
      value: 9615
    bootnode:
      type: string
      value: "" 
    m_val:
      type: string 
      value: ""
    cmds:
      type: string
      value: ""
    m_da_val_1_node:
      type: string
      value: <- get-hostname("/polygon/da-validator-1", "da-node")
    m_da_val_2_node:
      type: string
      value: <- get-hostname("/polygon/da-validator-2", "da-node")
    m_da_val_3_node:
      type: string
      value: <- get-hostname("/polygon/da-validator-3", "da-node")
    volume-data:
      type: string
      value: <- `${moncc-volume-path}/da`


#  Data-Avail Common Validator
#  ===============================

da-validator:
  defines: runnable
  inherits: ./da-common-node
  containers:
    defines: containers
    da-node: 
      labels:
        - com.datadoghq.ad.check_names=["openmetrics"]
        - com.datadoghq.ad.init_configs=[{}]
        - 'com.datadoghq.ad.instances=[{"openmetrics_endpoint": "http://%%host%%:9615", "namespace": "avail", "metrics":["substrate*"]}]'
  actions:
    defines: actions

    insert-key:
      description: "Insert key into keystore"
      arguments:
        type:
          type: string
          description: Key type like 'gran', 'babe', 'imol', 'audi', or 'auth' 
        suri:
          type: string
          description: Secrect URI 
        scheme:
          type: string
          description: Key Scheme, like 'Sr25519', 'Ed25519', etc. 
      code: |
        exec( "da-node", "/da/bin/data-avail", "key", "insert", `--chain=${chain_spec}`, "--base-path=/da/state", "--keystore-path=/da/keystore", `--suri=${args["suri"]}`, `--key-type=${args["type"]}`, `--scheme=${args["scheme"]}`)
        { type: $args["type"], scheme: $args["scheme"] } to-json

    insert-session-keys:
      description: "Insert Dev key into keystore"
      arguments:
        suri:
          type: string
          description: Like '//Alice', '//Bob'. 
      code: |
        []
        act(`polygon/${self_id}/insert-key`, "type", "babe", "suri", $args["suri"], "scheme", "Sr25519") parse-json append
        act(`polygon/${self_id}/insert-key`, "type", "gran", "suri", $args["suri"], "scheme", "Ed25519") parse-json append
        act(`polygon/${self_id}/insert-key`, "type", "imon", "suri", $args["suri"], "scheme", "Sr25519") parse-json append
        act(`polygon/${self_id}/insert-key`, "type", "audi", "suri", $args["suri"], "scheme", "Sr25519") parse-json append
        act(`polygon/${self_id}/insert-key`, "type", "auth", "suri", $args["suri"], "scheme", "Sr25519") parse-json append
        to-json

    load-keys:
      description: Load keys from Vault
      code: |
        act("polygon/da-vault/get_as_json", "path", `secret/da/testnet/${self_id}`) parse-json set-tmp("m_val") to-json
        act(`polygon/${self_id}/insert-session-keys`, "suri", $m_val["sk"]) 

    rpc-insert-key:
      description: "Insert key into keystore using RPC"
      arguments:
        type:
          type: string
          description: Key type like 'gran', 'babe', 'imol', 'audi', or 'auth' 
        suri:
          type: string
          description: Secrect URI 
        address:
          type: string
          description: Public address
      code: |
        {
          jsonrpc:"2.0",
          id:1,
          method:"author_insertKey",
          params: [ $args["type"], $args["suri"], $args["address"] ]
        } to-json set-tmp("payload")
        exec( "da-node", "curl", "http://localhost:9933", "-H", "Content-Type:application/json;charset=utf-8", "-d", $payload) 

    clean-keys:
      description: Remove keys from key store
      code: exec( "da-node", "rm", "-rf", "/da/keystore/*")

  files:
    defines: files
    da-val-def:
      container: da-node 
      path: /da/bin/da.sh
      mode: 755 
      contents: |
        #!/bin/bash
        cat /da/bin/da.sh ;
        /da/bin/data-avail \
          --validator \
          --chain {{ v "chain_spec" }} \
          --base-path /da/state \
          --name {{ v "name" }} \
          --node-key {{ v "node_key" }} \
          --keystore-path /da/keystore \
          --execution Native \
          --offchain-worker Always \
          --enable-offchain-indexing=true \
          --in-peers  {{ v "in_peers" }} \
          --out-peers {{ v "out_peers" }} \
          --prometheus-port {{ v "prometheus_port" }} \
          --prometheus-external \
          --port {{ v "p2p_port" }} \
          --ws-port {{ v "ws_port" }} \
          --rpc-port {{ v "rpc_port" }} {{ v "cmds" }} 2>&1

