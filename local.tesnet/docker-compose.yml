## Setting up something that replicates the testnet environment
# docker-compose -f docker-compose.local.testnet.yml up --abort-on-container-exit
## reset full local state
# find volume/testnet -type d -name 'state' -or -name 'keystore' | awk '{print "rm -rf ./" $0 "/*"}' | sh
## remove stopped containers
# docker-compose -f docker-compose.local.testnet.yml rm
version: "3.3"
services:
  validator1:
    container_name: validator1
    image: avail_dev:develop1
    build:
      context: ../images/da
      dockerfile: Dockerfile-dev
      args:
        - BRANCH=nonexisting_branch
        - FEATURES=
        - RUNTIME_BRANCH=nonexisting_branch
    tmpfs: /tmp
    volumes:
      - val_1_state:/da/state
      - ../volume/testnet/exec/:/da/exec:ro
      - ../volume/testnet/genesis:/da/genesis:ro
      - ../volume/testnet/validator1/node.key:/da/node.key:ro
      - ../volume/testnet/validator1/suri.txt:/da/suri.txt:ro
      - ../volume/testnet/validator1/keystore:/da/keystore
    command:
      --alice
      --base-path /da/state
      --name MATIC_VALIDATOR_1
      --keystore-path /da/keystore
      --execution native-else-wasm
      --in-peers 10
      --out-peers 10
    networks:
      - beyondnat
  validator2:
    container_name: validator2
    image: avail_dev:develop1
    tmpfs: /tmp
    volumes:
      - val_2_state:/da/state
      - ../volume/testnet/exec/:/da/exec:ro
      - ../volume/testnet/genesis:/da/genesis:ro
      - ../volume/testnet/validator2/node.key:/da/node.key:ro
      - ../volume/testnet/validator2/suri.txt:/da/suri.txt:ro
      - ../volume/testnet/validator2/keystore:/da/keystore
    command:
      --bob
      --base-path /da/state
      --name MATIC_VALIDATOR_2
      --keystore-path /da/keystore
      --execution native-else-wasm
      --in-peers 10
      --out-peers 10
    networks:
      - beyondnat
  validator3:
    container_name: validator3
    image: avail_dev:develop1
    tmpfs: /tmp
    volumes:
      - val_3_state:/da/state
      - ../volume/testnet/exec/:/da/exec:ro
      - ../volume/testnet/genesis:/da/genesis:ro
      - ../volume/testnet/validator3/node.key:/da/node.key:ro
      - ../volume/testnet/validator3/suri.txt:/da/suri.txt:ro
      - ../volume/testnet/validator3/keystore:/da/keystore
    command:
      --validator
      --base-path /da/state
      --name MATIC_VALIDATOR_3
      --node-key-file /da/node.key
      --keystore-path /da/keystore
      --execution native-else-wasm
      --in-peers 10
      --out-peers 10
    networks:
      - beyondnat
  validator_alyssa:
    container_name: validator_alyssa
    image: avail_dev:develop1
    volumes:
      - alyssa_state:/da/state
      - ../volume/testnet/exec/:/da/exec:ro
      - ../volume/testnet/genesis:/da/genesis:ro
      - ../volume/testnet/validator_alyssa/node.key:/da/node.key:ro
      - ../volume/testnet/validator_alyssa/suri.txt:/da/suri.txt:ro
      - ../volume/testnet/validator_alyssa/keystore:/da/keystore
    command:
      --validator
      --base-path /da/state
      --name MATIC_VALIDATOR_ALYSSA
      --node-key-file /da/node.key
      --keystore-path /da/keystore
      --execution native-else-wasm
      --in-peers 10
      --out-peers 10
    networks:
      - beyondnat
# Sentry Node for Access
  sentry_node:
    container_name: sentry_node
    image: avail_dev:develop1
    volumes:
      - sentry_node_state:/da/state
      - ../volume/testnet/exec/:/da/exec:ro
      - ../volume/testnet/genesis:/da/genesis:ro
      - ../volume/testnet/full_node/node.key:/da/node.key:ro
      - ../volume/testnet/full_node/suri.txt:/da/suri.txt:ro
      - ../volume/testnet/full_node/keystore:/da/keystore
    ports:
      - 30330:30330
      - 9944:9944
    command:
      --base-path /da/state
      --name MATIC_SENTRY_NODE
      --node-key-file /da/node.key
      --keystore-path /da/keystore
      --execution native-else-wasm
      --in-peers 10
      --out-peers 10
      --port 30330
      --rpc-cors all
      --rpc-port 9944
      --unsafe-rpc-external
      --rpc-methods unsafe
      --state-pruning archive
      --enable-kate-rpc
    networks:
      beyondnat:
        ipv4_address: 17.0.0.100

  lightclient:
    build:  
        context: ../images/client
        dockerfile: Dockerfile-dev
        args:
          - LC_BRANCH=nonexisting_branch
    depends_on:
      - sentry_node
      - bootstraplc
    entrypoint: [
      "wait-for-it",
      "-t", "30",
      "sentry_node:9944",
      "--",
      "/app/avail-light/start.sh"
    ]
    ports:
      - 7005:7000
      - 7001:7001
    environment:
      - HTTP_SERVER_HOST=0.0.0.0
      - HTTP_SERVER_PORT=7000
      - BLOCK_MATRIX_PARTITION="None"
      - FULL_NODE_WS=["ws://sentry_node:9944"]
      - LOG_LEVEL="INFO"
      - BOOTSTRAPS=["/ip4/17.0.0.101/tcp/5369/p2p/12D3KooWSDaGuV1ewhyAEYsA6rk52hJyeN16hDE6bNgyRt62x7ie"]
      - BLOCK_PROCESSING_DELAY=0
      - APP_ID=1
      - RELAYS=["/ip4/17.0.0.102/tcp/38001/p2p/12D3KooWR3USn8DUFkm9v23yeY8vvtwHSqpnr5VnPptKXoiDK3E7"]
      - ROUTER=192.168.0.42
      - SUBNET=17.0.0.0/16
    extra_hosts:
      - "sentry_node:17.0.0.100"
      - "bootstraplc:17.0.0.101"
      - "relaylc:17.0.0.102"
    networks:
      beyondnat:
        ipv4_address: 17.0.0.109
  
  lightclient-1: # client with RPC disabled
    build:  
      context: ../images/client
      dockerfile: Dockerfile-dev
      args:
        - LC_BRANCH=nonexisting_branch    
    depends_on:
        - sentry_node
        - bootstraplc
    entrypoint: [
      "wait-for-it",
      "-t", "30",
      "sentry_node:9944",
      "--",
      "/app/avail-light/start.sh"
    ]
    ports:
      - 7003:7000
    environment:
      - HTTP_SERVER_HOST=0.0.0.0
      - HTTP_SERVER_PORT=7000
      - BLOCK_MATRIX_PARTITION="None"
      - FULL_NODE_WS=["ws://sentry_node:9944"]
      - LOG_LEVEL="INFO"
      - BOOTSTRAPS=["/ip4/17.0.0.101/tcp/5369/p2p/12D3KooWSDaGuV1ewhyAEYsA6rk52hJyeN16hDE6bNgyRt62x7ie"]
      - BLOCK_PROCESSING_DELAY=0
      - APP_ID=2
      - DISABLE_RPC=true
      - RELAYS=["/ip4/17.0.0.102/tcp/38001/p2p/12D3KooWR3USn8DUFkm9v23yeY8vvtwHSqpnr5VnPptKXoiDK3E7"]
      - ROUTER=192.168.0.42
      - SUBNET=17.0.0.0/16
    extra_hosts:
      - "sentry_node:17.0.0.100"
      - "relaylc:17.0.0.102"
    networks:
      behindnat:
        ipv4_address: 192.168.0.110
    cap_add: 
      - NET_ADMIN # needed to set the iptables rule

  fatclient:
    build:  
        context: ../images/fat
        dockerfile: Dockerfile-dev
        args:
          - LC_BRANCH=nonexisting_branch
    depends_on:
      - sentry_node
      - bootstraplc
    entrypoint: [
      "/app/avail-light/start.sh"
    ]
    ports:
      - 9000:9000
    environment:
      - BLOCK_MATRIX_PARTITION="1/1"
      - HTTP_SERVER_HOST=0.0.0.0
      - HTTP_SERVER_PORT=9000
      - FULL_NODE_WS=["ws://sentry_node:9944"]
      - LOG_LEVEL="INFO"
      - P2P_SEED=2
      - BOOTSTRAPS=["/dns4/bootstraplc/tcp/5369/p2p/12D3KooWSDaGuV1ewhyAEYsA6rk52hJyeN16hDE6bNgyRt62x7ie"]
      - RELAYS=["/dns4/relaylc/tcp/38001/p2p/12D3KooWR3USn8DUFkm9v23yeY8vvtwHSqpnr5VnPptKXoiDK3E7"]
    networks:
      - beyondnat

  bootstraplc:
    container_name: bootstraplc
    build:  
        context: ../images/bootstrap
        dockerfile: Dockerfile-dev
        args:
          - BOOTSTRAPLC_BRANCH=nonexisting_branch
    ports:
      - 5369:5369
      - 5370:5370
    networks:
      beyondnat:
        ipv4_address: 17.0.0.101

  relaylc:
    container_name: relaylc
    build:
        context: ../images/relay
        dockerfile: Dockerfile-dev
        args:
          - RELAY_BRANCH=nonexisting_branch
    ports:
      - 38000:38000
      - 38001:38001
    networks:
      beyondnat:
        ipv4_address: 17.0.0.102

  monitor:
    image: availj/monitor:v1.0.7
    container_name: monitor
    depends_on:
      - relaylc
      - bootstraplc
    networks:
      beyondnat:
        ipv4_address: 17.0.0.103
    restart: on-failure
  
  rogue-client:
    image: availj/monitor:test
    container_name: poison
    depends_on:
      - relaylc
      - bootstraplc
    networks:
      beyondnat:
        ipv4_address: 17.0.0.104
    restart: on-failure

  router:
    build:
        context: ../images/router
        dockerfile: Dockerfile
    environment:
      IPTABLES: "iptables-legacy"
      SUBNET_INTERNAL: "192.168.0.0/16" # must be the same as configured in the networks section
      ADDR_EXTERNAL: "17.0.0.42" # must be the same as configured in the networks section
    networks:
      behindnat:
        ipv4_address: 192.168.0.42
      beyondnat:
        ipv4_address: 17.0.0.42
    cap_add: 
      - NET_ADMIN # needed to set the iptables rule

  grs:
    build:
      context: ../images/grs
      dockerfile: Dockerfile-dev
      args:
        - GRS_BRANCH=nonexisting_branch
    restart: always
    ports:
      - 8000:8000
    depends_on:
      - db
    environment:
      - DATABASE_URL=postgres://postgres:relayservice@db:5432?sslmode=disable
      - AVAIL_RPC_ENDPOINT_1=wss://hex-rpc.avail.tools/ws
      - AVAIL_RPC_ENDPOINT_2=wss://rpc-hex-devnet.avail.tools/ws
      - AVAIL_RPC_ENDPOINT_3=wss://rpc-hex-devnet.avail.tools/ws
      - PRIVATE_KEY_1=023fa10f0271dd004379deb5f1f32f9d51c483cb3cc700d46ce0b41be16309d3
      - PRIVATE_KEY_2=3f7701fad16f6441849e0977afcdb898f8afdc3c7e76c2782f635628b215cf15
      - PRIVATE_KEY_3=36080e283a46d3d19f77d29430fab5d26c1335a8e4bd96c26f8e9e27e56757e7
      - PRIVATE_KEY_0=6a32eb73a647ac868f3994288eeb2dc0369861fe799b4302a8c91d6c1e32dbf1
      - PRIVATE_KEY_4=3c7112abaa388649df1e04d2cb5dde98ec7922965308ce843555a82fbcaf361e
      - PRIVATE_KEY_5=ca5e43835fd6522d814b8e28edfbb0c85446e86ef51f9b62a50662651736e3fe
      - PRIVATE_KEY_6=533010cbc3b8eaa7052250fe294748fea7b88eee3d8749c6b582fefc7ba154a2
      - PRIVATE_KEY_7=c0045664f64c6aa6861bf6786635d9708020981dab65515103719168a3726457
      - NUMBER_OF_THREADS=3
      - MAX_POOL_SIZE=8
      - TOTAL_USERS_QUERY_LIMIT=2
      - FAILURE_PRIVATE_KEY_NUMBER=5
      - COINGECKO_API_URL=https://pro-api.coingecko.com/api/v3/simple/price
      - COINGECKO_API_KEY=CG-1S4ELp3ggX3U3rqLHG4gtt6U
      - BROADCAST_CHANNEL_SIZE=20
      - PAYLOAD_SIZE=1048576
      - ASSIGNED_WALLET=0x53Ba580C12745FdFb6b5Ad5f32F33C1bbf26F112
    networks:
      beyondnat:
        ipv4_address: 17.0.0.107
  db:
    container_name: db
    restart: always
    image: postgres:16
    environment:
      POSTGRES_PASSWORD: relayservice
    volumes:
      - ./data/db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      beyondnat:
        ipv4_address: 17.0.0.108
      
volumes:
  val_1_state:
  val_2_state:
  val_3_state:
  sentry_node_state:
  alyssa_state:

networks:
  behindnat:
    ipam:
      config:
        - subnet: 192.168.0.0/16
  beyondnat:
    ipam:
      config:
        - subnet: 17.0.0.0/16
