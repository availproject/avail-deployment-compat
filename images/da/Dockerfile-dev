FROM rust:latest AS chef 
# We only pay the installation cost once, 
# it will be cached from the second build onwards
RUN cargo install cargo-chef 
WORKDIR app

FROM chef AS planner

ARG BRANCH=doesnt_exist
RUN git clone --depth 1 -b ${BRANCH} https://github.com/availproject/avail.git
WORKDIR /app/avail
# RUN cargo chef prepare --recipe-path /app/avail/recipe.json

FROM chef AS builder
# COPY --from=planner /app/avail/recipe.json recipe.json
RUN apt-get update && \
	apt-get install -y libssl3 gettext-base wait-for-it ca-certificates clang protobuf-compiler jq && \
	rm -rf /var/lib/apt/lists 

RUN rustup install 1.82.0 && rustup default 1.82.0
RUN rustup install nightly
RUN rustup target add wasm32-unknown-unknown --toolchain 1.82.0
RUN rustup target add wasm32-unknown-unknown --toolchain nightly

ARG BRANCH=doesnt_exist
ARG RUNTIME_BRANCH=doesnt_exist
ARG FEATURES=""

# Build application
RUN rm -rf avail && git clone --depth 1 -b ${BRANCH} https://github.com/availproject/avail.git
RUN cat /app/recipe.json | jq
# Build dependencies - this is the caching Docker layer!
#RUN cd avail && cargo chef cook --release -p avail-node --features "${FEATURES}" --recipe-path /app/recipe.json

COPY ./resources/download_or_build.sh avail
COPY ./resources/download_or_build_runtime.sh avail
RUN chmod +x avail/download_or_build.sh && chmod +x avail/download_or_build_runtime.sh
# This will utilize caching and check if rebuild is needed - if the branch has changed, so will this response
ADD https://api.github.com/repos/availproject/avail/commits/${BRANCH} last_commit.json
RUN cd avail && git fetch origin --tags --force && git reset --hard ${BRANCH} -- && git pull
RUN cd avail && ./download_or_build.sh "${BRANCH}" "${FEATURES}" && cp /app/avail/target/release/avail-node /app
#RUN cd avail && cargo build --release -p avail-node --features "${FEATURES}" && cp /app/avail/target/release/avail-node /app
# Now build runtime
ADD https://api.github.com/repos/availproject/avail/commits/${RUNTIME_BRANCH} last_commit2.json
RUN cd avail && git fetch origin --tags --force && git checkout ${RUNTIME_BRANCH} && git reset --hard ${RUNTIME_BRANCH} --
RUN cd avail && ./download_or_build_runtime.sh "${RUNTIME_BRANCH}" "${FEATURES}" && cp /app/avail/target/release/wbuild/da-runtime/da_runtime.compact.compressed.wasm /app/runtime.wasm
# RUN cd avail && cargo build --release -p da-runtime --features "${FEATURES}" && cp /app/avail/target/release/wbuild/da-runtime/da_runtime.compact.compressed.wasm /app/runtime.wasm

# We do not need the Rust toolchain to run the binary!
FROM debian:bookworm-slim AS runtime

RUN apt-get update && \
	apt-get install -y gettext-base wait-for-it ca-certificates xxd && \
	rm -rf /var/lib/apt/lists && \
	mkdir -p /da/bin

COPY --from=builder /app/avail-node /da/bin/
COPY --from=builder /app/runtime.wasm /da/bin/
# COPY ./resources/* /da/bin/
RUN xxd -p /da/bin/runtime.wasm | tr -d '\n' > wasm.hex

RUN /da/bin/avail-node build-spec --chain=dev > chainspec_template.json && cp chainspec_template.json /da/bin/chainspec.json && cp chainspec_template.json /da/bin/chainspec_template.json
# RUN sed -i 's/WASM_BINARY/\nWASM_BINARY\n/g' /da/bin/chainspec_template.json
# RUN csplit /da/bin/chainspec_template.json '/WASM_BINARY/' '{*}' && sed -i '/WASM_BINARY/d' xx*
# RUN truncate -s -1 xx00
# RUN cat xx00 wasm.hex xx01 > /da/bin/chainspec.json
# RUN apt-get update && apt-get install -y jq
ADD https://github.com/jqlang/jq/releases/download/jq-1.7/jq-linux-amd64 .

RUN chmod +x jq-linux-amd64
RUN ./jq-linux-amd64 --rawfile a wasm.hex '.genesis.runtimeGenesis.code=$a' chainspec_template.json > /da/bin/chainspec.json

# RUN cat /da/bin/chainspec.json | ./jq-linux-amd64

# RUN chmod +x /da/bin/substitute_keyword.sh && /da/bin/substitute_keyword.sh WASM_BINARY /da/bin/chainspec_template.json wasm.hex /da/bin/chainspec.json

WORKDIR /da
VOLUME ["/tmp", "/da/state", "/da/keystore"]
ENTRYPOINT ["/da/bin/avail-node", "--chain", "/da/bin/chainspec.json"]
