---
- name: avail devnet
  hosts: localhost
  become: true
  tasks:
    - name: setup virtualenv and system dependencies
      args:
        warn: false
      shell:
        cmd: |
          unset PYTHONPATH
          yum install curl gcc jq python3-devel python-boto3 python-devel python-virtualenv yum-utils -y
          curl -sSfo op.zip \
            https://cache.agilebits.com/dist/1P/op2/pkg/v2.0.0/op_linux_amd64_v2.0.0.zip \
            && unzip -od /usr/local/bin/ op.zip \
            && rm op.zip
          mkdir -p /opt/venv && chmod 0755 /opt/venv
          python3 -m venv /opt/venv/{{ CUSTOM_VENV }}
          source /opt/venv/{{ CUSTOM_VENV }}/bin/activate
          pip install --upgrade pip
          pip install boto3 botocore psutil ansible
          ansible-galaxy collection install amazon.aws community.docker
          deactivate

    - name: setup terraform and aws session manager
      args:
        warn: false
      shell:
        cmd: |
          mkdir -p /tmp/{{ REPO_NAME }} && mkdir -p $HOME/.terraform.d
          yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
          curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/linux_64bit/session-manager-plugin.rpm" -o "session-manager-plugin.rpm"
          yum install terraform session-manager-plugin.rpm -y

    - name: clone repo branch
      ansible.builtin.git:
        repo: https://{{ lookup("env", "PAT_TOKEN") }}@github.com/{{ ORG_NAME }}/{{ REPO_NAME }}.git
        dest: /tmp/{{ REPO_NAME }}
        clone: true
        accept_hostkey: true
        version: '{{ GIT_BRANCH_NAME }}'
        force: true
        update: true
      ignore_errors: false
      no_log: false

    - name: set deploy name if explicity given
      shell:
        cmd: |
          CLEAN_DEPLOY_NAME=$(sed -E 's/[^[:alnum:][:space:]]+/-/g' <<<{{ DEPLOY_NAME_OVERRIDE }})
          echo "$CLEAN_DEPLOY_NAME"
      register: deploy_name_override
      when: DEPLOY_NAME_OVERRIDE is defined
      
    - set_fact:
        clean_deploy: '{{ deploy_name_override.stdout_lines[-1] }}'
      when: DEPLOY_NAME_OVERRIDE is defined
      
    - name: set default deploy name as branch name if not explicity given
      shell:
        cmd: |
          CLEAN_DEPLOY_NAME=$(sed -E 's/[^[:alnum:][:space:]]+/-/g' <<<{{ GIT_BRANCH_NAME }})
          echo "$CLEAN_DEPLOY_NAME"
      register: deploy_name
      when: DEPLOY_NAME_OVERRIDE is undefined
      
    - set_fact:
        clean_deploy: '{{ deploy_name.stdout_lines[-1] }}'
      when: DEPLOY_NAME_OVERRIDE is undefined

    - name: create terraform cloud auth config
      copy:
        dest: /var/lib/awx/.terraform.d/credentials.tfrc.json
        content: |
          credentials "app.terraform.io" {
            token = "{{ lookup("env", "TF_TOKEN") }}"
          }
          
    - name: set unique module name to allow for concurrent devnet deployments
      args:
        warn: false
      shell:
        cmd: |
          sed -i -e 's/{module_name}/{{ clean_deploy }}/g' /tmp/{{ REPO_NAME }}/{{ TERRAFORM_PATH }}/main.tf
          sed -i -e 's/{module_name}/{{ clean_deploy }}/g' /tmp/{{ REPO_NAME }}/{{ TERRAFORM_PATH }}/outputs.tf
          sed -i -e 's/{module_name}/{{ clean_deploy }}/g' /tmp/{{ REPO_NAME }}/{{ INVENTORY_PATH }}

    - name: delete any orphan one password devnet resources
      ignore_errors: yes
      shell:
        cmd: |
          export OP_DEVICE={{ OP_DEVICE_ID }}
          eval $(echo '{{ lookup("env", "OP_PASS") }}' | op account add --address {{ OP_ADDRESS }} --email {{ OP_EMAIL }}  --secret-key {{ lookup("env", "OP_SECRET") }}  --shorthand awx --signin)
          op vault delete "Avail Devnet: {{ clean_deploy }}"
    
    - name: delete any orphan terraform devnet resources
      register: tf_result
      retries: 2
      delay: 5
      until: tf_result is not failed
      shell:
        cmd: |
          cd /tmp/{{ REPO_NAME }}/{{ TERRAFORM_PATH }}
          terraform init
          terraform destroy -target=module.{{ clean_deploy }} -no-color -var 'deploy_name={{ clean_deploy }}' -var 'owner={{ awx_user_name }}' -var 'full_node_count={{ FULL_NODE_COUNT }}' -var 'validator_count={{ VALIDATOR_COUNT }}' -auto-approve
    
    - name: init terraform and apply avail resources
      shell:
        cmd: |
          cd /tmp/{{ REPO_NAME }}/{{ TERRAFORM_PATH }}
          terraform init
          terraform apply -target=module.{{ clean_deploy }} -no-color -var 'deploy_name={{ clean_deploy }}' -var 'owner={{ awx_user_name }}' -var 'full_node_count={{ FULL_NODE_COUNT }}' -var 'validator_count={{ VALIDATOR_COUNT }}' -auto-approve
          echo $(terraform output -json pk_ansible)
      register: nodes
    
    - name: download binary
      get_url:
        url: https://github.com/{{ ORG_NAME }}/{{ GITHUB_BINARY_REPO }}/releases/download/{{ GITHUB_BINARY_VERSION_TAG }}/{{ GITHUB_BINARY_FILENAME }}
        dest: /tmp/{{ REPO_NAME }}/{{ GITHUB_BINARY_FILENAME }}
        mode: 0755
    
    - name: wallet, node key, and chainspec generation
      shell:
        cmd: |
          unset PYTHONPATH
          cd /tmp/{{ REPO_NAME }}/{{ SCRIPTS_PATH }}
          rm -r -f build/{{ clean_deploy }}
          source /opt/venv/{{ CUSTOM_VENV }}/bin/activate
          export OP_DEVICE={{ OP_DEVICE_ID }}
          eval $(echo '{{ lookup("env", "OP_PASS") }}' | op account add --address {{ OP_ADDRESS }} --email {{ OP_EMAIL }}  --secret-key {{ lookup("env", "OP_SECRET") }}  --shorthand awx --signin)
          bash prep.sh -d {{ clean_deploy }} -r {{ REPO_NAME }} -b {{ GITHUB_BINARY_FILENAME }} -i {{ INVENTORY_PATH }}
          deactivate
    
    - name: prep ssh key for remote node connections
      shell:
        cmd: |
          mkdir -p  ~/.ssh
          echo {{ nodes.stdout_lines[-1] }} > /tmp/awxSshKey.pem
          echo -e "$(</tmp/awxSshKey.pem )" > ~/.ssh/awxSshKey.pem
          chmod 400 ~/.ssh/awxSshKey.pem
    
    - name: configure avail devnet nodes after letting them initialize
      shell:
        cmd: |
          unset PYTHONPATH
          source /opt/venv/{{ CUSTOM_VENV }}/bin/activate
          DEPLOY_SPECIFIC_INV_GROUP=$(echo {{ clean_deploy }} | tr '-' '_')
          export OP_DEVICE={{ OP_DEVICE_ID }}
          eval $(echo '{{ lookup("env", "OP_PASS") }}' | op account add --address {{ OP_ADDRESS }} --email {{ OP_EMAIL }}  --secret-key {{ lookup("env", "OP_SECRET") }}  --shorthand awx --signin)
          ansible-playbook /tmp/{{ REPO_NAME }}/{{ SITE_PLAYBOOK_PATH }} -i /tmp/{{ REPO_NAME }}/{{ INVENTORY_PATH }} --extra-vars="clean_deploy_name={{ clean_deploy }} current_deploy_inventory=$DEPLOY_SPECIFIC_INV_GROUP avail_scripts_dir=/tmp/{{ REPO_NAME }}/{{ SCRIPTS_PATH }}"
          deactivate
